import streamlit as st
import pandas as pd
# Importation de OpenCageGeocode √† la place de Nominatim
from opencage.geocoder import OpenCageGeocode
# Plus besoin de RateLimiter avec un service qui g√®re mieux les requ√™tes
# from geopy.extra.rate_limiter import RateLimiter 
import time

# --- Configuration de l'application Streamlit ---
st.set_page_config(
    page_title="V√©rificateur de Correspondance Coordonn√©es-Commune (Rapide)",
    page_icon="‚ö°",
    layout="wide"
)

st.title("‚ö° V√©rificateur de Correspondance Coordonn√©es-Commune (Rapide)")
st.markdown("""
Cette application vous permet de v√©rifier la correspondance entre les coordonn√©es g√©ographiques (latitude, longitude)
et la commune associ√©e dans votre fichier CSV, **avec une vitesse am√©lior√©e gr√¢ce √† OpenCage Geocoding API**.
""")

st.warning("‚ö†Ô∏è **Important :** Ce service utilise OpenCage Geocoding API. Il offre des performances bien sup√©rieures √† Nominatim, mais n'oubliez pas que les plans gratuits ont des limites de requ√™tes (g√©n√©ralement 2500 requ√™tes par jour). Au-del√†, le service peut devenir payant ou bloqu√© jusqu'au jour suivant.")

# --- Initialisation du g√©ocodeur OpenCage ---
# C'EST ICI QUE NOUS UTILISONS TA CL√â API
# Pour le test et le code, la cl√© est ici. Pour le d√©ploiement sur Streamlit Cloud,
# nous utiliserons une m√©thode plus s√©curis√©e (voir instructions apr√®s le code).
API_KEY = st.secrets["OPENCAGE_API_KEY"]
geocoder = OpenCageGeocode(API_KEY)

# --- Fonction de v√©rification des coordonn√©es (adapt√©e pour OpenCage) ---
@st.cache_data
def verify_coordinates_opencage(latitude, longitude, expected_commune):
    """
    V√©rifie si les coordonn√©es correspondent √† la commune attendue en utilisant OpenCage.
    Retourne un tuple (correspondance_ok, commune_trouvee, message_erreur).
    """
    try:
        # Tente de g√©ocoder les coordonn√©es avec OpenCage.
        # reverse_geocode est la m√©thode pour OpenCage
        results = geocoder.reverse_geocode(latitude, longitude, language='fr') # Pr√©ciser la langue pour de meilleurs r√©sultats fran√ßais

        if results and len(results) > 0:
            # OpenCage renvoie des r√©sultats dans un format l√©g√®rement diff√©rent
            components = results[0]['components']
            
            # Rechercher la commune dans diff√©rents champs d'OpenCage
            # Les noms peuvent varier (city, town, village, municipality, etc.)
            found_commune = components.get('city') or \
                            components.get('town') or \
                            components.get('village') or \
                            components.get('municipality') or \
                            components.get('county') or \
                            components.get('suburb') or \
                            components.get('hamlet') # Ajout de hamlet pour des lieux tr√®s petits

            if found_commune:
                normalized_expected = expected_commune.lower().strip()
                normalized_found = found_commune.lower().strip()

                # Comparaison plus flexible: si l'un est contenu dans l'autre
                if normalized_expected in normalized_found or normalized_found in normalized_expected:
                    return True, found_commune, None
                else:
                    return False, found_commune, f"La commune trouv√©e ({found_commune}) ne correspond pas √† l'attendue ({expected_commune})."
            else:
                return False, None, "Aucune commune trouv√©e pour ces coordonn√©es."
        else:
            return False, None, "Aucune information de localisation trouv√©e pour ces coordonn√©es."
    except Exception as e:
        # G√©rer les erreurs sp√©cifiques d'API comme les limites de requ√™tes
        if "rate limit exceeded" in str(e).lower() or "forbidden" in str(e).lower():
            return False, None, f"Erreur OpenCage : Limite de requ√™tes API d√©pass√©e ou cl√© invalide. Veuillez v√©rifier votre cl√© ou le quota."
        return False, None, f"Erreur lors de la v√©rification : {e}"

# --- Section de t√©l√©chargement de fichier ---
st.header("1. T√©l√©chargez votre fichier CSV")
uploaded_file = st.file_uploader("Choisissez un fichier CSV", type="csv")

if uploaded_file is not None:
    st.success("Fichier CSV t√©l√©charg√© avec succ√®s !")
    # Lecture du fichier CSV
    try:
        # Utilise le d√©limiteur point-virgule comme identifi√© pr√©c√©demment
        df = pd.read_csv(uploaded_file, delimiter=';')
        st.subheader("Aper√ßu de votre fichier (les 5 premi√®res lignes) :")
        st.dataframe(df.head())

        # V√©rification des colonnes requises
        required_columns = ['latitude', 'longitude', 'commune']
        if not all(col in df.columns for col in required_columns):
            st.error(f"Le fichier CSV doit contenir les colonnes suivantes : {', '.join(required_columns)}")
            st.info("V√©rifiez l'orthographe exacte des en-t√™tes de colonnes (minuscules) ou le s√©parateur de votre fichier (doit √™tre ';').")
        else:
            st.header("2. Lancement de la v√©rification")
            st.info("Traitement en cours... Pr√©parez-vous √† la vitesse ! üöÄ")

            # Initialisation des listes pour stocker les r√©sultats
            results = []
            progress_bar = st.progress(0)
            total_rows = len(df)

            # Application de la fonction de v√©rification √† chaque ligne
            for index, row in df.iterrows():
                lat = row['latitude']
                lon = row['longitude']
                commune = str(row['commune']) # Assurez-vous que la commune est une cha√Æne de caract√®res

                # Utilisation de la nouvelle fonction de v√©rification OpenCage
                is_match, found_commune, error_message = verify_coordinates_opencage(lat, lon, commune)
                
                results.append({
                    'latitude': lat,
                    'longitude': lon,
                    'commune_attendue': commune,
                    'commune_trouvee': found_commune,
                    'correspondance_ok': is_match,
                    'message_erreur': error_message
                })
                # Mise √† jour de la barre de progression
                progress_bar.progress((index + 1) / total_rows)
            
            results_df = pd.DataFrame(results)

            st.subheader("3. R√©sultats de la v√©rification")

            # Affichage des lignes avec des non-correspondances
            false_matches_df = results_df[results_df['correspondance_ok'] == False]

            if not false_matches_df.empty:
                st.error(f"üö® {len(false_matches_df)} non-correspondance(s) trouv√©e(s) :")
                # Afficher seulement les colonnes pertinentes pour les erreurs
                st.dataframe(false_matches_df[['latitude', 'longitude', 'commune_attendue', 'commune_trouvee', 'message_erreur']])

                # Option de t√©l√©chargement des erreurs
                st.download_button(
                    label="T√©l√©charger les non-correspondances en CSV",
                    data=false_matches_df.to_csv(index=False, sep=';', encoding='utf-8').encode('utf-8'),
                    file_name="non_correspondances_coordonnees.csv",
                    mime="text/csv",
                    help="Cliquez pour t√©l√©charger un fichier CSV contenant toutes les lignes o√π les coordonn√©es ne correspondent pas √† la commune attendue."
                )
            else:
                st.success("üéâ Toutes les coordonn√©es correspondent aux communes ! Aucune non-correspondance trouv√©e.")

            # Option d'afficher toutes les v√©rifications (pour le debug/visualisation compl√®te)
            if st.checkbox("Afficher toutes les v√©rifications (y compris les correspondances)"):
                st.subheader("Toutes les v√©rifications :")
                st.dataframe(results_df)

    except Exception as e:
        st.error(f"Une erreur est survenue lors de la lecture ou du traitement de votre fichier CSV : {e}")
        st.info("Veuillez vous assurer que votre fichier est bien un CSV valide et contient les colonnes 'latitude', 'longitude' et 'commune'. Assurez-vous √©galement que les colonnes sont s√©par√©es par des points-virgules ';'.")

st.markdown("---")
st.markdown("D√©velopp√© avec ‚ù§Ô∏è par votre Partenaire de code.")
