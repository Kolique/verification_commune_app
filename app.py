import streamlit as st
import pandas as pd
from geopy.geocoders import Nominatim
from geopy.extra.rate_limiter import RateLimiter
import time

# --- Configuration de l'application Streamlit ---
st.set_page_config(
    page_title="V√©rificateur de Correspondance Coordonn√©es-Commune",
    page_icon="üó∫Ô∏è",
    layout="wide"
)

st.title("üó∫Ô∏è V√©rificateur de Correspondance Coordonn√©es-Commune")
st.markdown("""
Cette application vous permet de v√©rifier la correspondance entre les coordonn√©es g√©ographiques (latitude, longitude)
et la commune associ√©e dans votre fichier CSV.
""")

st.warning("‚ö†Ô∏è **Important :** Ce service utilise Nominatim d'OpenStreetMap. Il y a des limites d'utilisation (environ 1 requ√™te par seconde). Pour de tr√®s gros fichiers, cela peut prendre du temps ou rencontrer des probl√®mes de d√©passement de limite. Pour une utilisation plus intensive, des services de g√©ocodage payants seraient plus adapt√©s.")

# --- Initialisation du g√©ocodeur Nominatim ---
# Il est crucial de d√©finir un 'user_agent' unique pour votre application.
# Remplacez "mon_app_de_verification_coordonnees" par un nom qui identifie votre application.
geolocator = Nominatim(user_agent="mon_app_de_verification_coordonnees_par_code_partenaire")

# Utilisation de RateLimiter pour respecter les limites de requ√™tes de Nominatim
# Cela assure qu'il y a un d√©lai minimum entre les requ√™tes (ici, 1 seconde).
geocode = RateLimiter(geolocator.reverse, min_delay_seconds=1)

# --- Fonction de v√©rification des coordonn√©es ---
@st.cache_data
def verify_coordinates(latitude, longitude, expected_commune):
    """
    V√©rifie si les coordonn√©es correspondent √† la commune attendue.
    Retourne un tuple (correspondance_ok, commune_trouvee, message_erreur).
    """
    try:
        # Tente de g√©ocoder les coordonn√©es
        location = geocode(f"{latitude}, {longitude}")

        if location:
            # R√©cup√®re les informations d'adresse brutes
            address = location.raw.get('address', {})

            # Essaye de trouver la ville/commune dans diff√©rents champs
            # Ajout de 'county' et 'suburb' pour plus de robustesse, car la 'commune' peut varier.
            found_commune = address.get('city') or \
                            address.get('town') or \
                            address.get('village') or \
                            address.get('municipality') or \
                            address.get('county') or \
                            address.get('suburb') # Ajout de suburb

            if found_commune:
                # Normalise les noms pour une meilleure comparaison (minuscules, sans accents, etc.)
                # Pour une comparaison simple, nous allons juste mettre en minuscules et supprimer les espaces.
                # Pour une robustesse accrue, une librairie de normalisation de cha√Ænes (comme unidecode ou difflib) pourrait √™tre utilis√©e.
                normalized_expected = expected_commune.lower().strip()
                normalized_found = found_commune.lower().strip()

                # On v√©rifie si la commune trouv√©e est contenue dans la commune attendue ou vice-versa,
                # pour g√©rer les petites variations de noms (ex: "Paris" vs "Paris Cedex")
                if normalized_expected in normalized_found or normalized_found in normalized_expected:
                    return True, found_commune, None
                else:
                    return False, found_commune, f"La commune trouv√©e ({found_commune}) ne correspond pas √† l'attendue ({expected_commune})."
            else:
                return False, None, "Aucune commune trouv√©e pour ces coordonn√©es."
        else:
            return False, None, "Aucune information de localisation trouv√©e pour ces coordonn√©es."
    except Exception as e:
        return False, None, f"Erreur lors de la v√©rification : {e}"

# --- Section de t√©l√©chargement de fichier ---
st.header("1. T√©l√©chargez votre fichier CSV")
uploaded_file = st.file_uploader("Choisissez un fichier CSV", type="csv")

if uploaded_file is not None:
    st.success("Fichier CSV t√©l√©charg√© avec succ√®s !")
    # Lecture du fichier CSV
    try:
        # C'est la ligne corrig√©e : ajout de delimiter=';'
        df = pd.read_csv(uploaded_file, delimiter=';')
        st.subheader("Aper√ßu de votre fichier (les 5 premi√®res lignes) :")
        st.dataframe(df.head())

        # V√©rification des colonnes requises
        required_columns = ['latitude', 'longitude', 'commune']
        if not all(col in df.columns for col in required_columns):
            st.error(f"Le fichier CSV doit contenir les colonnes suivantes : {', '.join(required_columns)}")
            st.info("V√©rifiez l'orthographe des en-t√™tes de colonnes ou le s√©parateur de votre fichier (doit √™tre ';').")
        else:
            st.header("2. Lancement de la v√©rification")
            st.info("Traitement en cours... Cela peut prendre un certain temps en fonction de la taille de votre fichier et des limites du service de g√©ocodage.")

            # Initialisation des listes pour stocker les r√©sultats
            results = []
            progress_bar = st.progress(0)
            total_rows = len(df)

            # Application de la fonction de v√©rification √† chaque ligne
            for index, row in df.iterrows():
                lat = row['latitude']
                lon = row['longitude']
                commune = str(row['commune']) # Assurez-vous que la commune est une cha√Æne de caract√®res

                is_match, found_commune, error_message = verify_coordinates(lat, lon, commune)
                
                results.append({
                    'latitude': lat,
                    'longitude': lon,
                    'commune_attendue': commune,
                    'commune_trouvee': found_commune,
                    'correspondance_ok': is_match,
                    'message_erreur': error_message
                })
                # Mise √† jour de la barre de progression
                progress_bar.progress((index + 1) / total_rows)
            
            results_df = pd.DataFrame(results)

            st.subheader("3. R√©sultats de la v√©rification")

            # Affichage des lignes avec des non-correspondances
            false_matches_df = results_df[results_df['correspondance_ok'] == False]

            if not false_matches_df.empty:
                st.error(f"üö® {len(false_matches_df)} non-correspondance(s) trouv√©e(s) :")
                # Afficher seulement les colonnes pertinentes pour les erreurs
                st.dataframe(false_matches_df[['latitude', 'longitude', 'commune_attendue', 'commune_trouvee', 'message_erreur']])

                # Option de t√©l√©chargement des erreurs
                st.download_button(
                    label="T√©l√©charger les non-correspondances en CSV",
                    data=false_matches_df.to_csv(index=False, sep=';', encoding='utf-8').encode('utf-8'),
                    file_name="non_correspondances_coordonnees.csv",
                    mime="text/csv",
                    help="Cliquez pour t√©l√©charger un fichier CSV contenant toutes les lignes o√π les coordonn√©es ne correspondent pas √† la commune attendue."
                )
            else:
                st.success("üéâ Toutes les coordonn√©es correspondent aux communes ! Aucune non-correspondance trouv√©e.")

            # Option d'afficher toutes les v√©rifications (pour le debug/visualisation compl√®te)
            if st.checkbox("Afficher toutes les v√©rifications (y compris les correspondances)"):
                st.subheader("Toutes les v√©rifications :")
                st.dataframe(results_df)

    except Exception as e:
        st.error(f"Une erreur est survenue lors de la lecture ou du traitement de votre fichier CSV : {e}")
        st.info("Veuillez vous assurer que votre fichier est bien un CSV valide et contient les colonnes 'latitude', 'longitude' et 'commune'. Assurez-vous √©galement que les colonnes sont s√©par√©es par des points-virgules ';'.")

st.markdown("---")
st.markdown("D√©velopp√© avec ‚ù§Ô∏è par votre Partenaire de code.")
