import streamlit as st
import pandas as pd
from opencage.geocoder import OpenCageGeocode
# Nous avons besoin de geopy.distance pour calculer la distance entre les points
from geopy.distance import great_circle
import time # Gardons time au cas o√π pour des d√©lais entre les requ√™tes si n√©cessaire

# --- Configuration de l'application Streamlit ---
st.set_page_config(
    page_title="V√©rificateur de Correspondance Coordonn√©es-Commune (Distance)",
    page_icon="üó∫Ô∏è",
    layout="wide"
)

st.title("üó∫Ô∏è V√©rificateur de Correspondance Coordonn√©es-Commune (Bas√© sur la Distance)")
st.markdown("""
Cette application vous permet d'identifier les points GPS qui sont **significativement √©loign√©s** de leur commune attendue.
Nous allons calculer la distance entre votre point GPS et le centre g√©ocod√© de la commune que vous avez fournie.
""")

st.warning("‚ö†Ô∏è **Important :** Ce service utilise OpenCage Geocoding API. Il offre de bonnes performances, mais n'oubliez pas que les plans gratuits ont des limites de requ√™tes (g√©n√©ralement 2500 requ√™tes par jour). Au-del√†, le service peut devenir payant ou bloqu√© jusqu'au jour suivant. Une requ√™te est faite pour chaque commune unique pour obtenir son centre.")

# --- Initialisation du g√©ocodeur OpenCage ---
# C'EST ICI QUE VOUS METTREZ VOTRE CL√â API
# Pour un d√©ploiement s√©curis√© sur Streamlit Cloud, utilisez st.secrets (voir doc Streamlit).
# Exemple: API_KEY = st.secrets["OPENCAGE_API_KEY"]
# Pour un test local, vous pouvez d√©commenter la ligne ci-dessous et mettre votre cl√© directement,
# mais NE PAS FAIRE CELA POUR UN D√âPLOIEMENT PUBLIC.
try:
    API_KEY = st.secrets["OPENCAGE_API_KEY"]
except:
    st.error("Cl√© API OpenCage introuvable. Veuillez configurer `OPENCAGE_API_KEY` dans `st.secrets` ou la d√©finir directement dans le code pour le test.")
    st.stop() # Arr√™te l'ex√©cution de l'application si la cl√© n'est pas trouv√©e

geocoder = OpenCageGeocode(API_KEY)

# Dictionnaire pour stocker les centro√Ødes de communes d√©j√† g√©ocod√©es
# Cela √©vitera de faire plusieurs requ√™tes pour la m√™me commune
commune_centroids = {}

# Fonction pour obtenir les coordonn√©es du centre d'une commune (g√©ocodage direct)
@st.cache_data(show_spinner=False) # Cache pour √©viter de refaire des requ√™tes pour la m√™me commune
def get_commune_centroid(commune_name):
    """
    Obtient les coordonn√©es (latitude, longitude) du centre d'une commune via OpenCage.
    Met en cache les r√©sultats pour √©viter des requ√™tes r√©p√©t√©es.
    """
    if commune_name in commune_centroids:
        return commune_centroids[commune_name]

    try:
        # Utilise le g√©ocodeur OpenCage pour le g√©ocodage direct
        results = geocoder.geocode(f"{commune_name}, France", language='fr') # Ajoutez "France" pour am√©liorer la pr√©cision
        if results and len(results) > 0:
            coords = (results[0]['geometry']['lat'], results[0]['geometry']['lng'])
            commune_centroids[commune_name] = coords
            return coords
        return None
    except Exception as e:
        st.warning(f"Impossible de g√©ocoder le centre de '{commune_name}'. Erreur: {e}")
        return None

# --- Section de t√©l√©chargement de fichier ---
st.header("1. T√©l√©chargez votre fichier CSV")
uploaded_file = st.file_uploader("Choisissez un fichier CSV", type="csv")

if uploaded_file is not None:
    st.success("Fichier CSV t√©l√©charg√© avec succ√®s !")
    # Lecture du fichier CSV
    try:
        df = pd.read_csv(uploaded_file, delimiter=';')
        st.subheader("Aper√ßu de votre fichier (les 5 premi√®res lignes) :")
        st.dataframe(df.head())

        # V√©rification des colonnes requises
        required_columns = ['latitude', 'longitude', 'commune']
        if not all(col in df.columns for col in required_columns):
            st.error(f"Le fichier CSV doit contenir les colonnes suivantes : `{', '.join(required_columns)}`")
            st.info("V√©rifiez l'orthographe exacte des en-t√™tes de colonnes (minuscules) ou le s√©parateur de votre fichier (doit √™tre ';').")
        else:
            st.header("2. Lancement de la v√©rification bas√©e sur la distance")
            st.info("Pr√©-traitement des communes uniques pour obtenir leurs centres...")

            # R√©cup√©rer tous les noms de communes uniques pour les g√©ocoder
            unique_communes = df['commune'].unique()
            geocoded_unique_communes_count = 0
            with st.spinner(f"G√©ocodage des {len(unique_communes)} communes uniques..."):
                for i, commune in enumerate(unique_communes):
                    get_commune_centroid(str(commune)) # Assurez-vous que c'est une cha√Æne
                    geocoded_unique_communes_count = len(commune_centroids)
                    # Mettre un petit d√©lai pour les API gratuites (Nominatim par exemple)
                    # Pour OpenCage, c'est moins critique car ils g√®rent mieux les QPS,
                    # mais peut √™tre utile si vous avez un tr√®s grand nombre de requ√™tes uniques.
                    # time.sleep(0.05)
                st.success(f"Centro√Ødes pour {geocoded_unique_communes_count} communes uniques r√©cup√©r√©s.")


            st.info("Traitement de chaque point GPS pour calculer la distance au centre de sa commune attendue. Cela peut prendre un certain temps pour 6000 lignes. üöÄ")

            # Slider pour le seuil de distance
            DISTANCE_THRESHOLD_KM = st.slider(
                "Seuil de distance (km) : Un point est erron√© si > √† ce seuil du centre de sa commune attendue",
                min_value=0.1, max_value=50.0, value=2.0, step=0.1,
                help="Ajustez ce seuil pour d√©finir ce que vous consid√©rez comme une 'erreur'. Les points situ√©s √† une distance sup√©rieure seront marqu√©s."
            )

            # Initialisation des listes pour stocker les r√©sultats
            results = []
            progress_bar = st.progress(0)
            total_rows = len(df)

            # Application de la fonction de v√©rification √† chaque ligne
            for index, row in df.iterrows():
                lat = row['latitude']
                lon = row['longitude']
                commune_attendue = str(row['commune']) # Assurez-vous que la commune est une cha√Æne de caract√®res

                # Obtenir les coordonn√©es du centre de la commune (d√©j√† cach√©es si unique)
                centroid_coords = get_commune_centroid(commune_attendue)

                distance = None
                is_out_of_threshold = False
                error_message = None

                if centroid_coords:
                    try:
                        point_coords = (lat, lon)
                        distance = great_circle(point_coords, centroid_coords).km
                        if distance > DISTANCE_THRESHOLD_KM:
                            is_out_of_threshold = True
                            error_message = f"Distance ({distance:.2f} km) sup√©rieure au seuil ({DISTANCE_THRESHOLD_KM} km)."
                        else:
                             error_message = f"Distance ({distance:.2f} km) inf√©rieure ou √©gale au seuil ({DISTANCE_THRESHOLD_KM} km)."

                    except Exception as e:
                        error_message = f"Erreur de calcul de distance : {e}"
                        is_out_of_threshold = True # Marquer comme erreur si calcul impossible
                else:
                    error_message = f"Impossible de trouver le centre de la commune '{commune_attendue}'."
                    is_out_of_threshold = True # Marquer comme erreur si le centre n'est pas trouv√©


                results.append({
                    'latitude': lat,
                    'longitude': lon,
                    'commune_attendue': commune_attendue,
                    'commune_centre_lat': centroid_coords[0] if centroid_coords else None,
                    'commune_centre_lon': centroid_coords[1] if centroid_coords else None,
                    'distance_au_centre_km': distance,
                    'est_hors_seuil': is_out_of_threshold,
                    'message_detail': error_message
                })
                # Mise √† jour de la barre de progression
                progress_bar.progress((index + 1) / total_rows)
            
            results_df = pd.DataFrame(results)

            st.subheader("3. R√©sultats de la v√©rification")

            # Affichage des lignes avec des non-correspondances (maintenant 'est_hors_seuil' True)
            false_matches_df = results_df[results_df['est_hors_seuil'] == True]

            if not false_matches_df.empty:
                st.error(f"üö® **{len(false_matches_df)} point(s) identifi√©(s) comme potentiellement erron√©(s)** (distance > {DISTANCE_THRESHOLD_KM} km ou probl√®me de g√©ocodage) :")
                st.dataframe(false_matches_df[[
                    'latitude', 'longitude', 'commune_attendue', 'distance_au_centre_km', 'message_detail'
                ]])

                # Option de t√©l√©chargement des erreurs
                st.download_button(
                    label="T√©l√©charger les points erron√©s (distance) en CSV",
                    data=false_matches_df.to_csv(index=False, sep=';', encoding='utf-8').encode('utf-8'),
                    file_name="points_errones_distance.csv",
                    mime="text/csv",
                    help="Cliquez pour t√©l√©charger un fichier CSV contenant toutes les lignes o√π le point GPS est trop √©loign√© du centre de la commune attendue ou dont le centre n'a pas pu √™tre g√©ocod√©."
                )
            else:
                st.success(f"üéâ Tous les points sont √† moins de {DISTANCE_THRESHOLD_KM} km du centre de leur commune attendue ou n'ont pas rencontr√© de probl√®me de g√©ocodage. Aucune anomalie majeure d√©tect√©e.")

            # Option d'afficher toutes les v√©rifications (pour le debug/visualisation compl√®te)
            if st.checkbox("Afficher toutes les v√©rifications (y compris ceux dans le seuil)"):
                st.subheader("Toutes les v√©rifications :")
                st.dataframe(results_df)

    except Exception as e:
        st.error(f"Une erreur est survenue lors de la lecture ou du traitement de votre fichier CSV : {e}")
        st.info("Veuillez vous assurer que votre fichier est bien un CSV valide et contient les colonnes 'latitude', 'longitude' et 'commune'. Assurez-vous √©galement que les colonnes sont s√©par√©es par des points-virgules ';'.")

st.markdown("---")
st.markdown("D√©velopp√© avec ‚ù§Ô∏è par votre Partenaire de code.")
